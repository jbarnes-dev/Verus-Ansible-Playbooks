###
#
# Ansible playbook to perform a daemon upgrade
#
###

- name: Verus Node Upgrade Playbook
  hosts: <hosts>
  become: true
  vars:
    verus_user: verus
    verus_home: "/home/verus"
    verus_executable_dir: "/home/verus/bin"
    git: true
    github_repo: "veruscoin/veruscoin"
    os_keyword: "linux"
    arch_keywords: ["amd64", "x86_64"]
    ext_url: "none"
    verify_with_local_daemon: true

  tasks:
    - name: Determine currently installed version of verusd
      become_user: "{{ verus_user }}"
      shell: |
        set -o pipefail
        "{{ verus_executable_dir }}/verusd" --version 2>/dev/null | head -n1 | cut -f4 -d" "
      args:
        executable: /bin/bash
      register: current_verusd_version_raw
      changed_when: false

    - name: Normalize current version
      set_fact:
        current_verusd_version: "{{ current_verusd_version_raw.stdout }}"

    - name: Fetch latest release metadata from GitHub
      uri:
        url: "https://api.github.com/repos/{{ github_repo }}/releases/latest"
        method: GET
        return_content: yes
        force_basic_auth: yes
      register: git_release_response

    - name: Save the latest release version
      set_fact:
        latest_release: "{{ git_release_response.json.tag_name }}"

    - name: Compare to decide if upgrade needed
      set_fact:
        upgrade_needed: "{{ (latest_release | regex_replace('^v','') | string) is version((current_verusd_version | regex_replace('^v', '') | string), 'gt') }}"

    - name: Show version status
      debug:
        msg: >-
          Current={{ current_verusd_version }}, Latest={{ latest_release }},
          Upgrade needed={{ upgrade_needed }}

    - name: Skip when up to date
      meta: end_play
      when: not upgrade_needed

    - name: Parse JSON of git release
      set_fact:
        download_url: "{{ (git_release_response.json.assets | json_query(query))[0].browser_download_url }}"
      vars:
        query: "[?ends_with(name, '-x86_64.tgz')]"

    - name: Download the latest release
      get_url:
        url: "{{ download_url }}"
        dest: "/home/verus/"
      become: yes
      become_user: verus

    - name: Unarchive the tarball
      unarchive:
        src: "/home/verus/{{ download_url | basename }}"
        dest: "/home/verus/"
        remote_src: yes
      become: yes
      become_user: verus

    - name: Parse json of extracted tarball
      shell: "cat /home/verus/Verus-CLI-Linux-{{ latest_release }}-x86_64.tar.gz.signature.txt"
      register: tarballsig

    - name: Save JSON data to a variable as a fact
      set_fact:
        tarball_sig_data: "{{ tarballsig.stdout | from_json }}"

    - name: Get sha256hash of downloaded tarball for verification
      shell: 'sha256sum /home/verus/Verus-CLI-Linux-{{ latest_release }}-x86_64.tar.gz | cut -f1 -d" "'
      register: sha256sum_result

    - name: Save sha256sum as variable
      set_fact:
        sha256_tarball: "{{ sha256sum_result.stdout }}"

    - name: Verify the downloaded tarball using api.verus.services
      uri:
        url: https://api.verus.services
        method: POST
        return_content: true
        body_format: json
        headers:
          Content-Type: "text/plain"
        body:
          jsonrpc: "1.0"
          id: "curltext"
          method: "verifyhash"
          params:
            - "{{ tarball_sig_data.signer }}"
            - "{{ tarball_sig_data.signature }}"
            - "{{ sha256_tarball }}"
      register: verify_response_raw

    - name: Store verification response as variable
      set_fact:
        verify_response: "{{ verify_response_raw.content | from_json }}"

    - meta: end_play
      when: '{{ verify_response.result != true }}'

    - name: Proceed with extraction if verified
      shell: 'tar -xzvf /home/verus/Verus-CLI-Linux-{{ latest_release }}-x86_64.tar.gz && mv verus-cli/verusd bin/verusd; mv verus-cli/verus bin/verus && rm -rf verus-cli && rm Verus-CLI*'
      args:
        chdir:
          /home/verus
      become: yes
      become_user: verus
      when: '{{ verify_response.result == true }}'

    - name: Verus stop and restart
      become_user: "{{ verus_user }}"
      block:
      - name: Stop verus daemon if running
        shell: |
          if pgrep -x verusd >/dev/null 2>&1; then
            "{{ verus_executable_dir }}/verus" stop || true
          fi
        args:
          executable: /bin/bash

      - name: Wait until verus daemon is fully stopped
        shell: |
          if pgrep -x verusd >/dev/null 2>&1; then
            echo RUNNING
          else
            echo STOPPED
          fi
        args:
          executable: /bin/bash
        register: verusd_state
        retries: 30
        delay: 2
        until: verusd_state.stdout.strip() == "STOPPED"
        changed_when: false
        failed_when: false  # allow interim "RUNNING" without marking task failed

      - name: Restart verus daemon
        shell: |
          ulimit -Sc unlimited
          nohup "{{ verus_executable_dir }}/verusd" -daemon &>/dev/null &
        args:
          executable: /bin/bash
